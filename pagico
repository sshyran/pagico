#!/usr/bin/python

import os
import sys
import time
import shutil
import gettext
import platform
import subprocess
import webbrowser

import gtk
import glib
import dbus
import webkit
import gobject

import dbus
import dbus.service
import dbus.mainloop.glib

gobject.threads_init()
dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
dbus.mainloop.glib.threads_init()

gettext.install('pagico', unicode=True)

ui_info = '''
<ui>
  <menubar name='MenuBar'>
      <menu action='FileMenu'>
          <menu action='NewMenu'>
              <menuitem action='NewTaskItem'/>
              <separator/>
              <menuitem action='NewProjectItem'/>
              <menuitem action='ContactItem'/>
          </menu>
          <separator/>
          <menuitem action='DashboardItem'/>
          <separator/>
          <menuitem action='InboxItem'/>
          <menuitem action='ProjectsItem'/>
          <menuitem action='ContactsItem'/>
          <menuitem action='WorkspaceItem'/>
          <separator/>
          <menuitem action='LockDatabaseItem'/>
          <menuitem action='CreateNewDatabaseItem'/>
          <separator/>
          <menuitem action='CloseDatabaseItem'/>
          <menuitem action='QuitPagicoItem'/>
      </menu>
      <menu action='EditMenu'>
          <menuitem action='UndoItem'/>
          <menuitem action='RedoItem'/>
          <separator/>
          <menuitem action='CutItem'/>
          <menuitem action='CopyItem'/>
          <menuitem action='PasteItem'/>
          <separator/>
          <menuitem action='SnapbackItem'/>
          <menuitem action='PrintItem'/>
      </menu>
      <menu action='ToolsMenu'>
          <menuitem action='ProgramPreferencesItem'/>
          <menuitem action='DatabasePreferencesItem'/>
      </menu>
      <menu action='HelpMenu'>
          <menuitem action='UserManualItem'/>
          <menuitem action='OnlineHelpItem'/>
          <separator/>
          <menuitem action='WebsiteItem'/>
          <menuitem action='AboutItem'/>
      </menu>
  </menubar>
</ui>
'''

class WebView(webkit.WebView):
    def __init__(self):
        webkit.WebView.__init__(self)


class Pagico(gtk.Window):
    TARGET = [
        ('STRING', 0, 0),
        ('text/plain', 0, 0),
    ]

    CONFIG_PATH = os.path.join(glib.get_user_config_dir(), 'pagico')
    if not os.path.exists(CONFIG_PATH):
        os.makedirs(CONFIG_PATH)


    def __init__(self):
        gtk.Window.__init__(self)

        self.init_daemon()
        self.load_config()
        self.start_abyssws()
        self.menu_sensitive = False

        self.set_title('Pagico')
        self.set_size_request(1024, 600)
        self.set_icon_name('pagico')
        vbox = gtk.VBox(False, 0)
        self.add(vbox)

        bus = dbus.SessionBus()
        try:
            object = bus.get_object("com.pagico.clienty", "/com/pagico/clienty", 'com.pagico.clienty')
            bus.add_signal_receiver(self.on_db_signal_received, interface_keyword='dbus_interface', member_keyword='db')
        except Exception, e:
            print e

        merge = gtk.UIManager()
        self.set_data("ui-manager", merge)
        merge.insert_action_group(self._create_action_group(), 0)
        self.add_accel_group(merge.get_accel_group())

        try:
            mergeid = merge.add_ui_from_string(ui_info)
        except gobject.GError, msg:
            print "building menus failed: %s" % msg

        bar = merge.get_widget("/MenuBar")
        bar.show() 
        vbox.pack_start(bar, False, False, 0)

        self.webview = WebView()
        if platform.linux_distribution()[2] != 'natty':
            self.webview.drag_dest_set(gtk.DEST_DEFAULT_ALL, self.TARGET[:-1],
                                       gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_MOVE | gtk.gdk.ACTION_LINK)
            self.webview.connect('drag-data-received', self.on_drag_data_received)

        vbox.pack_start(self.webview, True, True, 0)

        self.webview.connect('notify::load-status', self.on_load_status_changed)
        self.webview.connect('notify::title', self.on_title_changed)
        self.webview.connect('create-web-view', self.on_create_web_view)
        self.webview.connect('print-requested', self.on_print_requested)
        self.webview.connect('selection-changed', self.on_selection_changed)
        try:
            self.webview.connect('editing-began', self.on_editing_ended)
            self.webview.connect('editing-ended', self.on_editing_ended)
        except Exception, e:
            print e
        self.connect('destroy', self.on_quit_pagico)

        self.webview.load_uri('http://127.0.0.1:1200/?nopopup')
        self.on_editing_ended(self.webview)
        self.on_selection_changed(self.webview)

        self.show_all()

    def on_editing_ended(self, widget):
        self.action_group.get_action('UndoItem').set_sensitive(self.webview.can_copy_clipboard())
        self.action_group.get_action('RedoItem').set_sensitive(self.webview.can_copy_clipboard())

    def on_selection_changed(self, widget):
        self.action_group.get_action('CopyItem').set_sensitive(self.webview.can_copy_clipboard())
        self.action_group.get_action('CutItem').set_sensitive(self.webview.can_cut_clipboard())
        self.action_group.get_action('PasteItem').set_sensitive(self.webview.can_paste_clipboard())

    def on_print_requested(self, webview, webframe):
        getattr(webframe, 'print')()

    def on_create_web_view(self, webview, webframe):
        win = gtk.Window()
        new_webview = webkit.WebView()
        new_webview.connect('notify::title', self.on_title_changed)
        new_webview.connect('web-view-ready', self.on_web_view_ready)
        new_webview.connect('close-web-view', self.on_close_web_view)
        win.add(new_webview)
        return new_webview

    def on_close_web_view(self, webview):
        win = webview.get_toplevel()
        win.destroy()
        return True

    def on_web_view_ready(self, webview):
        win = webview.get_toplevel()
        win.show_all()
        return True

    def on_quit_pagico(self, widget=None):
        self.end_abyssws()
        self.unload_config()
        self.quit_daemon()
        gtk.main_quit()

    def init_daemon(self):
        try:
            systembus = dbus.SystemBus()
            self.daemon = systembus.get_object('com.pagico.daemon', '/com/pagico/daemon')
        except Exception, e:
            self.daemon = None

    def load_config(self):
        abyss_config_path = os.path.join(self.CONFIG_PATH, 'abyss.conf')
        abyss_log_path = os.path.join(self.CONFIG_PATH, 'log')

        if not os.path.exists(abyss_config_path):
            shutil.copy('/opt/pagico/CodeX/extras/httpd_linux.txt', abyss_config_path)
        if not os.path.exists(abyss_log_path):
            os.makedirs(abyss_log_path)

        method = self.daemon.get_dbus_method('load_config', dbus_interface='com.pagico.daemon')
        method(self.CONFIG_PATH)

    def start_abyssws(self):
        subprocess.Popen('/opt/pagico/httpd/abyssws')
        time.sleep(2)

    def end_abyssws(self):
        os.system('killall -KILL abyssws')
        os.system('killall -KILL php-cgi')

    def unload_config(self):
        method = self.daemon.get_dbus_method('unload_config', dbus_interface='com.pagico.daemon')
        method()

    def quit_daemon(self):
        method = self.daemon.get_dbus_method('exit', dbus_interface='com.pagico.daemon')
        method()

    def on_drag_data_received(self, widget, drag_context, x, y, selection_data, info, timestamp):
        print drag_context, selection_data, info, timestamp

    def catchall_signal_handler(self, *args, **kwargs):
        print ("Caught signal (in catchall handler) "
                           + kwargs['dbus_interface'] + "." + kwargs['member'])
        for arg in args:
            print "        " + str(arg)

    def activate_action(self, action):
        name = action.get_name()
        action_scripts = {
            'NewTaskItem': 'NewInboxTask();',
            'NewProjectItem': 'NewTopic();',
            'NewContactProfileItem': 'NewProfile();',
            'DashboardItem': 'Goto(0);',
            'InboxItem': 'Goto(1);',
            'ProjectsItem': 'Goto(2);',
            'ContactsItem': 'Goto(3);',
            'ProgramPreferencesItem': 'Goto(4);',
            'DatabasePreferencesItem': 'Goto(4,1);',
            'WorkspaceItem': 'Goto(7);',
            'SnapbackItem': 'GoBack();',
            'PrintItem': 'printScreen();',
        }

        action_navigations = {
            'LockDatabaseItem': 'http://127.0.0.1:1200/html/SignIn.php',
            'CloseDatabaseItem': 'http://127.0.0.1:1200/start/',
            'OnlineHelpItem': 'http://help.pagico.com/',
            'WebsiteItem': 'http://www.pagico.com/',
        }

        action_methods = {
            'CreateNewDatabaseItem': self.create_new_database,
            'UserManualItem': self.open_user_manual,
            'QuitPagicoItem': self.on_quit_pagico,
            'AboutItem': self.show_about,
            'CopyItem': self.webview.copy_clipboard,
            'CutItem': self.webview.cut_clipboard,
            'PasteItem': self.webview.paste_clipboard,
            'RedoItem': self.webview.redo,
            'UndoItem': self.webview.undo,
        }

        if name in action_scripts:
            self.webview.execute_script(action_scripts[name])
        elif name in action_navigations:
            url = action_navigations[name]
            if url.startswith('http://127.0.0.1:1200'):
                self.webview.load_uri(action_navigations[name])
            else:
                webbrowser.open(url)
        elif name in action_methods:
            action_methods[name]()
        else:
            print action, action.get_name()

    def show_about(self):
        def on_about_image_clicked(self, widget, window):
            window.destroy()

        if self.menu_sensitive:
            self.webview.execute_script('ShowAbout();')
        else:
            window = gtk.Dialog(parent=self.get_toplevel())
            window.set_resizable(False)

            eventbox = gtk.EventBox()
            eventbox.set_events(gtk.gdk.BUTTON_PRESS_MASK)
            eventbox.connect('button_press_event', on_about_image_clicked, window)
            window.get_content_area().pack_start(eventbox, False, False, 0)

            image = gtk.image_new_from_file('/opt/pagico/CodeX/img/App_GUI/BundleCover/About.png')
            eventbox.add(image)

            window.show_all()
            window.run()
            window.destroy()

    def open_user_manual(self):
        os.system('xdg-open /opt/pagico/CodeX/UserManual.pdf')

    def on_load_status_changed(self, widget, status):
        print widget, widget.get_load_status().value_nick

    def on_title_changed(self, widget, param):
        title = widget.get_property('title')
        win = widget.get_toplevel()
        if title:
            win.set_title(title)

            if title.endswith('pgco') and 'Loading' not in title and \
                    hasattr(win, 'set_menu_sensitive'):
                win.set_menu_sensitive(True)
        elif hasattr(win, 'set_menu_sensitive'):
            win.set_menu_sensitive(False)

    def set_menu_sensitive(self, sensitive):
        items = ['NewMenu', 'DashboardItem', 'InboxItem', 'ProjectsItem',
                 'ContactsItem', 'WorkspaceItem', 'LockDatabaseItem',
                 'CloseDatabaseItem']

        for action_name in items:
            self.action_group.get_action(action_name).set_sensitive(sensitive)

        self.menu_sensitive = sensitive

    def create_new_database(self):
        dialog = gtk.FileChooserDialog(title=_('Create new database'),
                                       parent=self,
                                       action=gtk.FILE_CHOOSER_ACTION_CREATE_FOLDER,
                                       buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                                                gtk.STOCK_SAVE, gtk.RESPONSE_ACCEPT))
        dialog.set_current_folder(os.getenv('HOME'))
        response = dialog.run()
        filename = dialog.get_filename()
        dialog.destroy()

        if response ==  gtk.RESPONSE_ACCEPT:
            if not filename.endswith('.pgco'):
                pgco_filename = filename + '.pgco'
                if not os.path.exists(filename):
                    os.unlink(filename)
                    os.mkdir(pgco_filename)
                else:
                    pass
            else:
                if not os.path.exists(filename):
                    os.mkdir(filename)
                else:
                    pass

            f = open(os.path.join(self.CONFIG_PATH, 'DB_to_create'), 'w')
            f.write(filename)
            f.close()

            self.webview.load_uri('http://127.0.0.1:1200/start/loader.php')

    def open_database(self):
        dialog = gtk.FileChooserDialog(title=_('Open database'),
                                       parent=self,
                                       action=gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER,
                                       buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                                                gtk.STOCK_OPEN, gtk.RESPONSE_ACCEPT))
        response = dialog.run()
        filename = dialog.get_filename()
        dialog.destroy()

        if response == gtk.RESPONSE_ACCEPT:
            f = open(os.path.join(self.CONFIG_PATH, 'DB_to_load'), 'w')
            f.write(filename)
            f.close()

            self.webview.load_uri('http://127.0.0.1:1200/start/loader.php')

    def _create_action_group(self):
        entries = (
            ("FileMenu", None, _("_File")),
            ("NewMenu", None, _("_New")),
            ("NewTaskItem", None, _("Task"), "<control>T",
             None, self.activate_action),
            ("NewProjectItem", None, _("Project"), "<control>N",
             None, self.activate_action),
            ('NewContactProfileItem', None, _('Contact Profile'),
             '<control>M', None, self.activate_action),
            ('DashboardItem', None, _('Dashboard'),
             '<control>1', None, self.activate_action),
            ('InboxItem', None, _('Inbox'),
             '<control>2', None, self.activate_action),
            ('ProjectsItem', None, _('Projects'),
             '<control>3', None, self.activate_action),
            ('ContactsItem', None, _('Contacts'),
             '<control>4', None, self.activate_action),
            ('WorkspaceItem', None, _('Workspace'),
             '<control>5', None, self.activate_action),
            ('LockDatabaseItem', None, _('Lock Database'),
             '<control>L', None, self.activate_action),
            ('CloseDatabaseItem', None, _('Close Database'),
             '<shift><control>W', None, self.activate_action),
            ('QuitPagicoItem', None, _('Quit Pagico'),
             '<control>Q', None, self.activate_action),
            ('CreateNewDatabaseItem', None, _('Create New Database'),
             '<shift><control>N', None, self.activate_action),
            ('EditMenu', None, _('_Edit')),
            ('UndoItem', None, _('Undo'),
             '<control>Z', None, self.activate_action),
            ('RedoItem', None, _('Redo'),
             '<shift><control>Z', None, self.activate_action),
            ('CutItem', None, _('Cu_t'),
             '<control>X', None, self.activate_action),
            ('CopyItem', None, _('_Copy'),
             '<control>C', None, self.activate_action),
            ('PasteItem', None, _('_Paste'),
             '<control>V', None, self.activate_action),
            ('SnapbackItem', None, _('_Snapback'),
             '<control>left', None, self.activate_action),
            ('PrintItem', None, _('Print'),
             '<control>P', None, self.activate_action),
            ('ToolsMenu', None, _('_Tools')),
            ('ProgramPreferencesItem', None, _('Program Preferences'),
             None, None, self.activate_action),
            ('DatabasePreferencesItem', None, _('Database Preferences'),
             None, None, self.activate_action),
            ('HelpMenu', None, _('_Help')),
            ('UserManualItem', None, _('_User Manual'),
             None, None, self.activate_action),
            ('OnlineHelpItem', None, _('_Online Interactive Help'),
             None, None, self.activate_action),
            ('WebsiteItem', None, _('Pagico _Website'),
             None, None, self.activate_action),
            ('AboutItem', None, _('_About ...'),
             None, None, self.activate_action),
          )

        # Create the menubar and toolbar
        self.action_group = gtk.ActionGroup("AppWindowActions")
        self.action_group.add_actions(entries)

        return self.action_group


class PagicoClient(dbus.service.Object):
    def __init__(self, session_bus, window):
        bus_name = dbus.service.BusName('com.pagico.clienty', bus=session_bus)
        dbus.service.Object.__init__(self, bus_name, '/com/pagico/clienty')

        self.window = window

    def run(self):
        gtk.main()

    @dbus.service.method(dbus_interface='com.pagico.clienty')
    def show_window(self):
        self.window.present()

    @dbus.service.method(dbus_interface='com.pagico.clienty')
    def opendb(self):
        print 'try to open db'
        self.window.open_database()

    @dbus.service.method(dbus_interface='com.pagico.clienty')
    def createdb(self):
        print 'try to create db'
        self.window.create_new_database()

    @dbus.service.method(dbus_interface='com.pagico.clienty')
    def launch(self, path):
        os.system('xdg-open %s' % path)


def show_splash():
    win = gtk.Window(gtk.WINDOW_POPUP)
    win.set_position(gtk.WIN_POS_CENTER)

    vbox = gtk.VBox(False, 0)
    image = gtk.Image()
    image.set_from_file('/opt/pagico/splash.png')

    vbox.pack_start(image)
    win.add(vbox)

    win.show_all()

    while gtk.events_pending():
        gtk.main_iteration()

    win.destroy()


if __name__ == '__main__':
    show_splash()

    session_bus = dbus.SessionBus()

    if session_bus.request_name('com.pagico.clienty') != \
            dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
        method = session_bus.get_object('com.pagico.clienty',
                                        '/com/pagico/clienty')\
                                                .get_dbus_method("show_window")
        method()
        sys.exit(1)
    else:
        window = Pagico()
        client = PagicoClient(session_bus, window)
        client.run()
